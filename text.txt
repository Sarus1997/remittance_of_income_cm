// ignore_for_file: use_build_context_synchronously, library_private_types_in_public_api

import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:intl/intl.dart';
import 'package:pdf/pdf.dart';
import 'package:printing/printing.dart';
import 'package:http/http.dart' as http;
import 'package:pdf/widgets.dart' as pw;
import 'package:flutter/services.dart';

class IncomeReportPage extends StatefulWidget {
  const IncomeReportPage({super.key});

  @override
  _IncomeReportPageState createState() => _IncomeReportPageState();
}

class _IncomeReportPageState extends State<IncomeReportPage> {
  final TextEditingController _dateController = TextEditingController();
  final TextEditingController _staffIdController = TextEditingController();
  final TextEditingController _nameController = TextEditingController();
  final TextEditingController _deptController = TextEditingController();
  final TextEditingController _locationController = TextEditingController();

  final TextEditingController usdController = TextEditingController();
  final TextEditingController sgdController = TextEditingController();
  final TextEditingController twdController = TextEditingController();
  final TextEditingController jpyController = TextEditingController();
  final TextEditingController hkdController = TextEditingController();
  final TextEditingController gbpController = TextEditingController();
  final TextEditingController cnyController = TextEditingController();
  final TextEditingController audController = TextEditingController();
  final TextEditingController eurController = TextEditingController();

  final TextEditingController usdRateController = TextEditingController();
  final TextEditingController sgdRateController = TextEditingController();
  final TextEditingController twdRateController = TextEditingController();
  final TextEditingController jpyRateController = TextEditingController();
  final TextEditingController hkdRateController = TextEditingController();
  final TextEditingController gbpRateController = TextEditingController();
  final TextEditingController cnyRateController = TextEditingController();
  final TextEditingController audRateController = TextEditingController();
  final TextEditingController eurRateController = TextEditingController();

  final TextEditingController _creditController = TextEditingController();

  double total = 0.0;
  double usdResult = 0.0;
  double sgdResult = 0.0;
  String result = '';

  @override
  void initState() {
    super.initState();

    usdController.addListener(_calculateResult);
    usdRateController.addListener(_calculateResult);
    sgdController.addListener(_calculateResult);
    sgdRateController.addListener(_calculateResult);
  }

  void _calculateResult() {
    final usdValue = double.tryParse(usdController.text) ?? 0.0;
    final usdRateValue = double.tryParse(usdRateController.text) ?? 0.0;
    final sgdValue = double.tryParse(sgdController.text) ?? 0.0;
    final sgdRateValue = double.tryParse(sgdRateController.text) ?? 0.0;

    // Calculate the result for each currency
    usdResult = usdValue * usdRateValue;
    sgdResult = sgdValue * sgdRateValue;

    // Calculate the total
    total = usdResult + sgdResult;

    setState(() {
      // Rebuild the widget with the updated values
    });
  }

  @override
  Widget build(BuildContext context) {
    return Center(
      child: Container(
        width: MediaQuery.of(context).size.width * 0.8,
        constraints: const BoxConstraints(maxWidth: 1500),
        child: Padding(
          padding: const EdgeInsets.all(16.0),
          child: SingleChildScrollView(
            child: Column(
              children: [
                _buildHeader(),
                const SizedBox(height: 10),
                _buildFormSection(),
                const SizedBox(height: 10),
                Row(
                  children: [
                    Expanded(
                      flex: 1,
                      child: Column(
                        children: [
                          _buildCardRow(),
                          _buildCardTable(),
                        ],
                      ),
                    ),
                    const SizedBox(width: 10),
                    Expanded(
                      flex: 1,
                      child: Column(
                        children: [
                          _buildCurrencyRow(),
                          _buildCurrencyTable(),
                        ],
                      ),
                    ),
                    Expanded(
                      flex: 1,
                      child: Column(
                        children: [
                          _buildCoinsRow(),
                          _buildCoinsTable(),
                        ],
                      ),
                    ),
                  ],
                ),
                Row(
                  mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                  children: [
                    _buildSaveButton(),
                    _buildPrintButton(),
                  ],
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }

  Widget _buildHeader() {
    return const Row(
      mainAxisAlignment: MainAxisAlignment.spaceBetween,
      children: [
        Text("ใบนำส่งรายได้/Income Report Carnival Magic",
            style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold)),
        Text("Logo", style: TextStyle(fontSize: 18)),
      ],
    );
  }

  Widget _buildFormSection() {
    return Column(
      children: [
        _buildRow('วันที่/Date', _dateController, isDate: true),
        Row(
          children: [
            Expanded(child: _buildRow('ชื่อ/Name', _nameController)),
            const SizedBox(width: 10),
            Expanded(
                child:
                    _buildRow('เลขประจำตัว/Staff ID No.', _staffIdController)),
          ],
        ),
        Row(
          children: [
            Expanded(child: _buildRow('ฝ่าย/Dept', _deptController)),
            const SizedBox(width: 10),
            Expanded(
                child:
                    _buildRow('จุดสร้างรายได้/Location', _locationController)),
          ],
        ),
      ],
    );
  }

  Widget _buildRow(String label, TextEditingController controller,
      {bool isDate = false}) {
    return Padding(
      padding: const EdgeInsets.all(4.0),
      child: MouseRegion(
        cursor: isDate ? SystemMouseCursors.click : SystemMouseCursors.basic,
        child: GestureDetector(
          onTap: isDate ? () => _selectDate(context) : null,
          child: AbsorbPointer(
            absorbing: isDate,
            child: TextField(
              controller: controller,
              decoration: InputDecoration(
                labelText: label,
                border: const OutlineInputBorder(),
              ),
            ),
          ),
        ),
      ),
    );
  }

  Future<void> _selectDate(BuildContext context) async {
    DateTime? pickedDate = await showDatePicker(
      context: context,
      initialDate: DateTime.now(),
      firstDate: DateTime(2000),
      lastDate: DateTime.now(),
    );
    if (pickedDate != null) {
      setState(() {
        _dateController.text = DateFormat('dd/MM/yyyy').format(pickedDate);
      });
    }
  }

  Widget _buildSaveButton() {
    return ElevatedButton(
      onPressed: () async {
        const url =
            "http://172.2.100.14/application/query_income_report_cm/fluttercon.php?mode=INSERT_DATA&type=";

        // Prepare data to send
        Map<String, dynamic> incomeData = {
          "id_incom": "",
          "incom_docno": "",
          "incom_date": _dateController.text,
          "usercode": _staffIdController.text,
          "shopcode": _locationController.text,
          "shopname": _nameController.text,
          "deptcode": _deptController.text,
          "Credit_tot": _creditController.text,
          "Fccoin_tot": "",
          "Eshop_tot": "",
          "Voucher_tot": "",
          "Cheque_tot": "",
          "Payin_tot": "",
          "Tax_tot": "",
          "Gift_tot": "",
          "Coupon20_qty": "",
          "Coupon10_qty": "",
          "Coupon5_qty": "",
          "USD_qty": usdController.text,
          "USD_rate": usdRateController.text,
          "SGD_qty": sgdController.text,
          "SGD_rate": sgdRateController.text,
          "TWD_qty": twdController.text,
          "TWD_rate": twdRateController.text,
          "JPY_qty": jpyController.text,
          "JPY_rate": jpyRateController.text,
          "HKD_qty": hkdController.text,
          "HKD_rate": hkdRateController.text,
          "GBP_qty": gbpController.text,
          "GBP_rate": gbpRateController.text,
          "CNY_qty": cnyController.text,
          "CNY_rate": cnyRateController.text,
          "AUD_qty": audController.text,
          "AUD_rate": audRateController.text,
          "EUR_qty": eurController.text,
          "EUR_rate": eurRateController.text,
          "THB1000_qty": "",
          "THB500_qty": "",
          "THB100_qty": "",
          "THB50_qty": "",
          "THB20_qty": "",
          "THB10_qty": "",
          "THB5_qty": "",
          "THB2_qty": "",
          "THB1_qty": "",
          "THB050_qty": "",
          "THB025_qty": "",
          "TOTAL": total.toString(),
        };

        // Convert the data to JSON format
        String jsonData = jsonEncode([incomeData]);

        try {
          // Send HTTP POST request
          var response = await http.post(
            Uri.parse(url),
            headers: {
              "Content-Type": "application/json",
            },
            body: jsonData,
          );

          if (response.statusCode == 200) {
            print('Data sent successfully!');
          } else {
            print('Failed to send data. Status code: ${response.statusCode}');
          }
        } catch (e) {
          print('Error sending data: $e');
        }
      },
      child: const Text('บันทึก/Save'),
    );
  }

  Widget _buildPrintButton() {
    return ElevatedButton(
      onPressed: () async {},
      child: const Text('พิมพ์/Print'),
    );
  }

  //** Card */
  Widget _buildCardRow() {
    return Container(
      padding: const EdgeInsets.symmetric(vertical: 8),
      decoration: BoxDecoration(
        border: Border.all(color: Colors.black),
      ),
      child: const Center(
        child: Text(
          'บัตรเครดิต\nCredit Card',
          style: TextStyle(fontSize: 14, fontWeight: FontWeight.bold),
          textAlign: TextAlign.center,
        ),
      ),
    );
  }

  Widget _buildCardTable() {
    return Table(
      border: TableBorder.all(),
      children: [
        _buildTableRow(
          [
            const Text(
              '(4) รวม/Total',
              style: TextStyle(fontWeight: FontWeight.bold),
              textAlign: TextAlign.center,
            ),
            TextFormField(
              controller: _creditController,
              textAlign: TextAlign.center,
              decoration: const InputDecoration(
                border: InputBorder.none,
                contentPadding: EdgeInsets.symmetric(vertical: 2),
              ),
              style: const TextStyle(
                fontWeight: FontWeight.normal,
                fontSize: 14, // Adjusted font size if needed
              ),
              keyboardType: TextInputType.number,
              inputFormatters: <TextInputFormatter>[
                FilteringTextInputFormatter
                    .digitsOnly, // Ensures only numeric input
              ],
            ),
          ],
          alignments: [Alignment.center, Alignment.center],
        ),
      ],
    );
  }

  //** Currency */
  Widget _buildCurrencyRow() {
    return Container(
      padding: const EdgeInsets.symmetric(vertical: 8),
      decoration: BoxDecoration(
        border: Border.all(color: Colors.black),
      ),
      child: const Center(
        child: Text(
          'เงินสกุลต่างประเทศ\nForeign Currency',
          style: TextStyle(fontSize: 14, fontWeight: FontWeight.bold),
          textAlign: TextAlign.center,
        ),
      ),
    );
  }

  Widget _buildCurrencyTable() {
    return Table(
      border: TableBorder.all(),
      children: [
        _buildTableRow(
          [
            const Text(
              'จำนวน x มูลค่า\nQuantity x Rate',
              style: TextStyle(
                fontWeight: FontWeight.bold,
                fontSize: 14,
              ),
              textAlign: TextAlign.center,
            ),
            const Text(
              'จำนวนเงิน\nAmount',
              style: TextStyle(
                fontWeight: FontWeight.bold,
                fontSize: 14,
              ),
              textAlign: TextAlign.center,
            ),
          ],
          alignments: [Alignment.center, Alignment.center],
        ),
        _buildTableRow(
          [
            Row(
              children: [
                const Text('USD'),
                const SizedBox(width: 8),
                Expanded(
                  child: TextField(
                    controller: usdController,
                    keyboardType: TextInputType.number,
                    decoration: const InputDecoration(hintText: 'Enter USD'),
                  ),
                ),
                const Text('X'),
                Expanded(
                  child: TextField(
                    controller: usdRateController,
                    keyboardType: TextInputType.number,
                    decoration: const InputDecoration(hintText: 'Enter Rate'),
                  ),
                ),
              ],
            ),
            Row(
              children: [
                Expanded(
                  child: Text(usdResult.toStringAsFixed(2)),
                ),
              ],
            ),
          ],
        ),
        _buildTableRow(
          [
            Row(
              children: [
                const Text('SGD'),
                const SizedBox(width: 8),
                Expanded(
                  child: TextField(
                    controller: sgdController,
                    keyboardType: TextInputType.number,
                    decoration: const InputDecoration(hintText: 'Enter SGD'),
                  ),
                ),
                const Text('X'),
                Expanded(
                  child: TextField(
                    controller: sgdRateController,
                    keyboardType: TextInputType.number,
                    decoration: const InputDecoration(hintText: 'Enter Rate'),
                  ),
                ),
              ],
            ),
            Row(
              children: [
                Expanded(
                  child: Text(sgdResult.toStringAsFixed(2)),
                ),
              ],
            ),
          ],
        ),
        _buildTableRow(
          [
            const Text(
              '(4) รวม/Total',
              style: TextStyle(fontWeight: FontWeight.bold),
              textAlign: TextAlign.center,
            ),
            _buildTotalField(),
          ],
        ),
      ],
    );
  }

  Widget _buildTotalField() {
    return Text(total.toStringAsFixed(2));
  }

  TableRow _buildTableRow(List<Widget> cells,
      {List<Alignment> alignments = const []}) {
    return TableRow(
      children: List.generate(cells.length, (index) {
        return Container(
          alignment:
              alignments.isNotEmpty ? alignments[index] : Alignment.centerLeft,
          padding: const EdgeInsets.all(8.0),
          child: cells[index],
        );
      }),
    );
  }

  //** coins *
  Widget _buildCoinsRow() {
    return Container(
      padding: const EdgeInsets.symmetric(vertical: 8),
      decoration: BoxDecoration(
        border: Border.all(color: Colors.black),
      ),
      child: const Center(
        child: Text(
          'เงินสดสกุลไทย\nThai Currency',
          style: TextStyle(fontSize: 14, fontWeight: FontWeight.bold),
          textAlign: TextAlign.center,
        ),
      ),
    );
  }

  Widget _buildCoinsTable() {
    return Table(
      border: TableBorder.all(),
      children: const [
        TableRow(
          children: [
            Text(
              'ธนบัตร\nBanknotes',
              style: TextStyle(fontWeight: FontWeight.bold),
              textAlign: TextAlign.center,
            ),
            Text(
              'เหรียญกษาปณ์\nCoins',
              style: TextStyle(fontWeight: FontWeight.bold),
              textAlign: TextAlign.center,
            ),
            Text(
              'เหรียญกษาปณ์\nCoins',
              style: TextStyle(fontWeight: FontWeight.bold),
              textAlign: TextAlign.center,
            ),
          ],
        ),
      ],
    );
  }
}
